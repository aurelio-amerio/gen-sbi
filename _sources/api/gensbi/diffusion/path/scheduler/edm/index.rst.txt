gensbi.diffusion.path.scheduler.edm
===================================

.. py:module:: gensbi.diffusion.path.scheduler.edm


Classes
-------

.. autoapisummary::

   gensbi.diffusion.path.scheduler.edm.BaseSDE
   gensbi.diffusion.path.scheduler.edm.EDMScheduler
   gensbi.diffusion.path.scheduler.edm.VEScheduler
   gensbi.diffusion.path.scheduler.edm.VPScheduler


Module Contents
---------------

.. py:class:: BaseSDE

   Bases: :py:obj:`abc.ABC`


   
   Helper class that provides a standard way to create an ABC using
   inheritance.
















   ..
       !! processed by numpydoc !!

   .. py:method:: c_in(sigma)
      :abstractmethod:


      
      Preconditioning input coefficient.

      :param sigma: Noise scale.
      :type sigma: Array

      :returns: Input coefficient.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: c_noise(sigma)
      :abstractmethod:


      
      Preconditioning noise coefficient.

      :param sigma: Noise scale.
      :type sigma: Array

      :returns: Noise coefficient.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: c_out(sigma)
      :abstractmethod:


      
      Preconditioning output coefficient.

      :param sigma: Noise scale.
      :type sigma: Array

      :returns: Output coefficient.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: c_skip(sigma)
      :abstractmethod:


      
      Preconditioning skip connection coefficient.

      :param sigma: Noise scale.
      :type sigma: Array

      :returns: Skip coefficient.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: denoise(F, x, sigma, *args, **kwargs)

      
      Denoise function, :math:`D` in the EDM paper, which shares a connection with the score function:

      .. math::
          \nabla_x \log p(x; \sigma) = \frac{D(x; \sigma) - x}{\sigma^2}

      This function includes the preconditioning and is connected to the NN objective :math:`F`:

      .. math::
          D_\theta(x; \sigma) = c_\text{skip}(\sigma) x + c_\text{out}(\sigma) F_\theta (c_\text{in}(\sigma) x; c_\text{noise}(\sigma))

      :param F: Model function.
      :type F: Callable
      :param x: Input data.
      :type x: Array
      :param sigma: Noise scale.
      :type sigma: Array
      :param \*args: Additional arguments.
      :param \*\*kwargs: Additional keyword arguments.

      :returns: Denoised output.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: f(x, t)

      
      Drift term for the forward diffusion process.

      Computes the drift term :math:`f(x, t) = x \frac{ds}{dt} / s(t)` as used in the SDE formulation.

      :param x: Input data.
      :type x: Array
      :param t: Time.
      :type t: Array

      :returns: Drift term.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: g(x, t)

      
      Diffusion term for the forward diffusion process.

      Computes the diffusion term :math:`g(x, t) = s(t) \sqrt{2 \frac{d\sigma}{dt} \sigma(t)}` as used in the SDE formulation.

      :param x: Input data.
      :type x: Array
      :param t: Time.
      :type t: Array

      :returns: Diffusion term.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: get_loss_fn()

      
      Returns the loss function for EDM training, as described in the EDM paper.

      The loss is computed as (see Eq. 8 in the EDM paper):

      .. math::
          \lambda(\sigma) \, c_\text{out}^2(\sigma) \left[
              F(c_\text{in}(\sigma) x_t, c_\text{noise}(\sigma), \ldots)
              - \frac{1}{c_\text{out}(\sigma)} (x_1 - c_\text{skip}(\sigma) x_t)
          \right]^2

      :param None directly; returns a function that computes the loss.:

      :returns: Loss function.
      :rtype: Callable















      ..
          !! processed by numpydoc !!


   .. py:method:: loss_weight(sigma)
      :abstractmethod:


      
      Weight for the loss function, for MLE estimation, also known as λ(σ) in the EDM paper.

      :param sigma: Noise scale.
      :type sigma: Array

      :returns: Loss weight.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: s(t)
      :abstractmethod:


      
      Scaling function as in EDM paper.

      :param t: Time.
      :type t: Array

      :returns: Scaling value.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: s_deriv(t)
      :abstractmethod:


      
      Derivative of the scaling function.

      :param t: Time.
      :type t: Array

      :returns: Derivative of scaling.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: sample_noise(key, shape, sigma)

      
      Sample noise from the prior noise distribution with noise scale sigma(t).

      :param key: JAX random key.
      :type key: Array
      :param shape: Shape of the output.
      :type shape: Any
      :param sigma: Noise scale.
      :type sigma: Array

      :returns: Sampled noise.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: sample_prior(key, shape)

      
      Sample x from the prior distribution.

      :param key: JAX random key.
      :type key: Array
      :param shape: Shape of the output.
      :type shape: Any

      :returns: Sampled prior.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: sample_sigma(key, shape)
      :abstractmethod:


      
      Sample sigma from the prior noise distribution.

      :param key: JAX random key.
      :type key: Array
      :param shape: Shape of the output.
      :type shape: Any

      :returns: Sampled sigma.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: sigma(t)
      :abstractmethod:


      
      Returns the noise scale (schedule) at time t.

      :param t: Time.
      :type t: Array

      :returns: Noise scale.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: sigma_deriv(t)
      :abstractmethod:


      
      Derivative of the noise scale with respect to time.

      :param t: Time.
      :type t: Array

      :returns: Derivative of sigma.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: sigma_inv(sigma)
      :abstractmethod:


      
      Inverse of the noise scale function.

      :param sigma: Noise scale.
      :type sigma: Array

      :returns: Time corresponding to the given sigma.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: time_schedule(u)
      :abstractmethod:


      
      Given the value of the random uniform variable u ~ U(0,1), return the time t in the schedule.

      :param u: Uniform random variable in [0, 1].
      :type u: Array

      :returns: Time in the schedule.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: timesteps(i, N)

      
      Compute the time steps for a given index array and total number of steps.

      :param i: Step indices.
      :type i: Array
      :param N: Total number of steps.
      :type N: int

      :returns: Time steps.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:property:: name
      :type: str

      :abstractmethod:


      
      Returns the name of the SDE scheduler.
















      ..
          !! processed by numpydoc !!


.. py:class:: EDMScheduler(sigma_min=0.002, sigma_max=80.0, sigma_data=1.0, rho=7, P_mean=-1.2, P_std=1.2)

   Bases: :py:obj:`BaseSDE`


   
   Helper class that provides a standard way to create an ABC using
   inheritance.
















   ..
       !! processed by numpydoc !!

   .. py:method:: c_in(sigma)

      
      Preconditioning input coefficient.

      :param sigma: Noise scale.
      :type sigma: Array

      :returns: Input coefficient.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: c_noise(sigma)

      
      Preconditioning noise coefficient.

      :param sigma: Noise scale.
      :type sigma: Array

      :returns: Noise coefficient.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: c_out(sigma)

      
      Preconditioning output coefficient.

      :param sigma: Noise scale.
      :type sigma: Array

      :returns: Output coefficient.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: c_skip(sigma)

      
      Preconditioning skip connection coefficient.

      :param sigma: Noise scale.
      :type sigma: Array

      :returns: Skip coefficient.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: loss_weight(sigma)

      
      Weight for the loss function, for MLE estimation, also known as λ(σ) in the EDM paper.

      :param sigma: Noise scale.
      :type sigma: Array

      :returns: Loss weight.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: s(t)

      
      Scaling function as in EDM paper.

      :param t: Time.
      :type t: Array

      :returns: Scaling value.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: s_deriv(t)

      
      Derivative of the scaling function.

      :param t: Time.
      :type t: Array

      :returns: Derivative of scaling.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: sample_sigma(key, shape)

      
      Sample sigma from the prior noise distribution.

      :param key: JAX random key.
      :type key: Array
      :param shape: Shape of the output.
      :type shape: Any

      :returns: Sampled sigma.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: sigma(t)

      
      Returns the noise scale (schedule) at time t.

      :param t: Time.
      :type t: Array

      :returns: Noise scale.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: sigma_deriv(t)

      
      Derivative of the noise scale with respect to time.

      :param t: Time.
      :type t: Array

      :returns: Derivative of sigma.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: sigma_inv(sigma)

      
      Inverse of the noise scale function.

      :param sigma: Noise scale.
      :type sigma: Array

      :returns: Time corresponding to the given sigma.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: time_schedule(u)

      
      Given the value of the random uniform variable u ~ U(0,1), return the time t in the schedule.

      :param u: Uniform random variable in [0, 1].
      :type u: Array

      :returns: Time in the schedule.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:attribute:: P_mean
      :value: -1.2



   .. py:attribute:: P_std
      :value: 1.2



   .. py:property:: name

      
      Returns the name of the SDE scheduler.
















      ..
          !! processed by numpydoc !!


   .. py:attribute:: rho
      :value: 7



   .. py:attribute:: sigma_data
      :value: 1.0



   .. py:attribute:: sigma_max
      :value: 80.0



   .. py:attribute:: sigma_min
      :value: 0.002



.. py:class:: VEScheduler(sigma_min=0.001, sigma_max=15.0)

   Bases: :py:obj:`BaseSDE`


   
   Helper class that provides a standard way to create an ABC using
   inheritance.
















   ..
       !! processed by numpydoc !!

   .. py:method:: c_in(sigma)

      
      Preconditioning input coefficient.

      :param sigma: Noise scale.
      :type sigma: Array

      :returns: Input coefficient.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: c_noise(sigma)

      
      Preconditioning noise coefficient.

      :param sigma: Noise scale.
      :type sigma: Array

      :returns: Noise coefficient.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: c_out(sigma)

      
      Preconditioning output coefficient.

      :param sigma: Noise scale.
      :type sigma: Array

      :returns: Output coefficient.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: c_skip(sigma)

      
      Preconditioning skip connection coefficient.

      :param sigma: Noise scale.
      :type sigma: Array

      :returns: Skip coefficient.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: loss_weight(sigma)

      
      Weight for the loss function, for MLE estimation, also known as λ(σ) in the EDM paper.

      :param sigma: Noise scale.
      :type sigma: Array

      :returns: Loss weight.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: s(t)

      
      Scaling function as in EDM paper.

      :param t: Time.
      :type t: Array

      :returns: Scaling value.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: s_deriv(t)

      
      Derivative of the scaling function.

      :param t: Time.
      :type t: Array

      :returns: Derivative of scaling.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: sample_sigma(key, shape)

      
      Sample sigma from the prior noise distribution.

      :param key: JAX random key.
      :type key: Array
      :param shape: Shape of the output.
      :type shape: Any

      :returns: Sampled sigma.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: sigma(t)

      
      Returns the noise scale (schedule) at time t.

      :param t: Time.
      :type t: Array

      :returns: Noise scale.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: sigma_deriv(t)

      
      Derivative of the noise scale with respect to time.

      :param t: Time.
      :type t: Array

      :returns: Derivative of sigma.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: sigma_inv(sigma)

      
      Inverse of the noise scale function.

      :param sigma: Noise scale.
      :type sigma: Array

      :returns: Time corresponding to the given sigma.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: time_schedule(u)

      
      Given the value of the random uniform variable u ~ U(0,1), return the time t in the schedule.

      :param u: Uniform random variable in [0, 1].
      :type u: Array

      :returns: Time in the schedule.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:property:: name

      
      Returns the name of the SDE scheduler.
















      ..
          !! processed by numpydoc !!


   .. py:attribute:: sigma_max
      :value: 15.0



   .. py:attribute:: sigma_min
      :value: 0.001



.. py:class:: VPScheduler(beta_min=0.1, beta_max=20.0, e_s=0.001, e_t=1e-05, M=1000)

   Bases: :py:obj:`BaseSDE`


   
   Helper class that provides a standard way to create an ABC using
   inheritance.
















   ..
       !! processed by numpydoc !!

   .. py:method:: c_in(sigma)

      
      Preconditioning input coefficient.

      :param sigma: Noise scale.
      :type sigma: Array

      :returns: Input coefficient.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: c_noise(sigma)

      
      Preconditioning noise coefficient.

      :param sigma: Noise scale.
      :type sigma: Array

      :returns: Noise coefficient.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: c_out(sigma)

      
      Preconditioning output coefficient.

      :param sigma: Noise scale.
      :type sigma: Array

      :returns: Output coefficient.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: c_skip(sigma)

      
      Preconditioning skip connection coefficient.

      :param sigma: Noise scale.
      :type sigma: Array

      :returns: Skip coefficient.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: f(x, t)

      
      Drift term for the forward diffusion process.

      Computes the drift term :math:`f(x, t) = x \frac{ds}{dt} / s(t)` as used in the SDE formulation.

      :param x: Input data.
      :type x: Array
      :param t: Time.
      :type t: Array

      :returns: Drift term.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: g(x, t)

      
      Diffusion term for the forward diffusion process.

      Computes the diffusion term :math:`g(x, t) = s(t) \sqrt{2 \frac{d\sigma}{dt} \sigma(t)}` as used in the SDE formulation.

      :param x: Input data.
      :type x: Array
      :param t: Time.
      :type t: Array

      :returns: Diffusion term.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: loss_weight(sigma)

      
      Weight for the loss function, for MLE estimation, also known as λ(σ) in the EDM paper.

      :param sigma: Noise scale.
      :type sigma: Array

      :returns: Loss weight.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: s(t)

      
      Scaling function as in EDM paper.

      :param t: Time.
      :type t: Array

      :returns: Scaling value.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: s_deriv(t)

      
      Derivative of the scaling function.

      :param t: Time.
      :type t: Array

      :returns: Derivative of scaling.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: sample_sigma(key, shape)

      
      Sample sigma from the prior noise distribution.

      :param key: JAX random key.
      :type key: Array
      :param shape: Shape of the output.
      :type shape: Any

      :returns: Sampled sigma.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: sigma(t)

      
      Returns the noise scale (schedule) at time t.

      :param t: Time.
      :type t: Array

      :returns: Noise scale.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: sigma_deriv(t)

      
      Derivative of the noise scale with respect to time.

      :param t: Time.
      :type t: Array

      :returns: Derivative of sigma.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: sigma_inv(sigma)

      
      Inverse of the noise scale function.

      :param sigma: Noise scale.
      :type sigma: Array

      :returns: Time corresponding to the given sigma.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: time_schedule(u)

      
      Given the value of the random uniform variable u ~ U(0,1), return the time t in the schedule.

      :param u: Uniform random variable in [0, 1].
      :type u: Array

      :returns: Time in the schedule.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:attribute:: M
      :value: 1000



   .. py:attribute:: beta_d
      :value: 19.9



   .. py:attribute:: beta_max
      :value: 20.0



   .. py:attribute:: beta_min
      :value: 0.1



   .. py:attribute:: e_s
      :value: 0.001



   .. py:attribute:: e_t
      :value: 1e-05



   .. py:property:: name

      
      Returns the name of the SDE scheduler.
















      ..
          !! processed by numpydoc !!


