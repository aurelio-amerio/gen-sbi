gensbi.diffusion.solver.edm_samplers
====================================

.. py:module:: gensbi.diffusion.solver.edm_samplers


Functions
---------

.. autoapisummary::

   gensbi.diffusion.solver.edm_samplers.edm_ablation_sampler
   gensbi.diffusion.solver.edm_samplers.edm_sampler


Module Contents
---------------

.. py:function:: edm_ablation_sampler(sde, model, x_1, *, key, condition_mask=None, condition_value=None, return_intermediates=False, n_steps=18, S_churn=0, S_min=0, S_max=float('inf'), S_noise=1, method='Heun', model_kwargs={})

.. py:function:: edm_sampler(sde, model, x_1, *, key, condition_mask = None, condition_value = None, return_intermediates = False, n_steps = 18, S_churn = 0, S_min = 0, S_max = float('inf'), S_noise = 1, method = 'Heun', model_kwargs = {})

   
   EDM sampler for diffusion models.

   :param sde: SDE scheduler object.
   :param model: Model function.
   :type model: Callable
   :param x_1: Initial value.
   :type x_1: Array
   :param key: JAX random key.
   :type key: Array
   :param condition_mask: Mask for conditioning.
   :type condition_mask: Optional[Array]
   :param condition_value: Value for conditioning.
   :type condition_value: Optional[Array]
   :param return_intermediates: Whether to return intermediate steps.
   :type return_intermediates: bool
   :param n_steps: Number of steps.
   :type n_steps: int
   :param S_churn: Churn parameter.
   :type S_churn: float
   :param S_min: Minimum S value.
   :type S_min: float
   :param S_max: Maximum S value.
   :type S_max: float
   :param S_noise: Noise scale.
   :type S_noise: float
   :param method: Integration method ("Euler" or "Heun").
   :type method: str
   :param model_kwargs: Additional model arguments.
   :type model_kwargs: dict

   :returns: Sampled output.
   :rtype: Array















   ..
       !! processed by numpydoc !!

