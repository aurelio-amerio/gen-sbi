gensbi.diffusion.solver
=======================

.. py:module:: gensbi.diffusion.solver


Submodules
----------

.. toctree::
   :maxdepth: 1

   /api/gensbi/diffusion/solver/edm_samplers/index
   /api/gensbi/diffusion/solver/sde_solver/index
   /api/gensbi/diffusion/solver/solver/index


Classes
-------

.. autoapisummary::

   gensbi.diffusion.solver.SDESolver
   gensbi.diffusion.solver.Solver


Package Contents
----------------

.. py:class:: SDESolver(score_model, path)

   Bases: :py:obj:`gensbi.diffusion.solver.solver.Solver`


   
   Abstract base class for solvers.
















   ..
       !! processed by numpydoc !!

   .. py:method:: get_sampler(condition_mask = None, condition_value = None, cfg_scale = None, nsteps = 18, method = 'Heun', return_intermediates = False, model_extras = {}, solver_params = {})

      
      Returns a sampler function for the SDE.

      :param condition_mask: Mask for conditioning.
      :type condition_mask: Optional[Array]
      :param condition_value: Value for conditioning.
      :type condition_value: Optional[Array]
      :param cfg_scale: Classifier-free guidance scale (not implemented).
      :type cfg_scale: Optional[float]
      :param nsteps: Number of steps.
      :type nsteps: int
      :param method: Integration method.
      :type method: str
      :param return_intermediates: Whether to return intermediate steps.
      :type return_intermediates: bool
      :param model_extras: Additional model arguments.
      :type model_extras: dict
      :param solver_params: Additional solver parameters.
      :type solver_params: Optional[dict]

      :returns: Sampler function.
      :rtype: Callable















      ..
          !! processed by numpydoc !!


   .. py:method:: sample(key, x_init, condition_mask = None, condition_value = None, cfg_scale = None, nsteps = 18, method = 'Heun', return_intermediates = False, model_extras = {}, solver_params = {})

      
      Sample from the SDE using the sampler.

      :param key: JAX random key.
      :type key: Array
      :param x_init: Initial value.
      :type x_init: Array
      :param condition_mask: Mask for conditioning.
      :type condition_mask: Optional[Array]
      :param condition_value: Value for conditioning.
      :type condition_value: Optional[Array]
      :param cfg_scale: Classifier-free guidance scale (not implemented).
      :type cfg_scale: Optional[float]
      :param nsteps: Number of steps.
      :type nsteps: int
      :param method: Integration method.
      :type method: str
      :param return_intermediates: Whether to return intermediate steps.
      :type return_intermediates: bool
      :param model_extras: Additional model arguments.
      :type model_extras: dict
      :param solver_params: Additional solver parameters.
      :type solver_params: Optional[dict]

      :returns: Sampled output.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:attribute:: path


   .. py:attribute:: score_model


.. py:class:: Solver

   Bases: :py:obj:`abc.ABC`


   
   Abstract base class for solvers.
















   ..
       !! processed by numpydoc !!

   .. py:method:: sample(key, x_1)
      :abstractmethod:



