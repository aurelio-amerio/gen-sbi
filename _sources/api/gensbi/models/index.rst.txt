gensbi.models
=============

.. py:module:: gensbi.models


Submodules
----------

.. toctree::
   :maxdepth: 1

   /api/gensbi/models/flux1/index
   /api/gensbi/models/simformer/index


Classes
-------

.. autoapisummary::

   gensbi.models.Flux
   gensbi.models.FluxCFMLoss
   gensbi.models.FluxParams
   gensbi.models.Simformer
   gensbi.models.SimformerCFMLoss
   gensbi.models.SimformerConditioner
   gensbi.models.SimformerParams


Package Contents
----------------

.. py:class:: Flux(params)

   Bases: :py:obj:`flax.nnx.Module`


   
   Transformer model for flow matching on sequences.
















   ..
       !! processed by numpydoc !!

   .. py:method:: __call__(obs, obs_ids, cond, cond_ids, timesteps, conditioned = True, guidance = None)


   .. py:attribute:: cond_in


   .. py:attribute:: condition_embedding


   .. py:attribute:: condition_null


   .. py:attribute:: double_blocks


   .. py:attribute:: final_layer


   .. py:attribute:: hidden_size


   .. py:attribute:: in_channels


   .. py:attribute:: num_heads


   .. py:attribute:: obs_in


   .. py:attribute:: out_channels


   .. py:attribute:: params


   .. py:attribute:: pe_embedder


   .. py:attribute:: qkv_features


   .. py:attribute:: single_blocks


   .. py:attribute:: time_in


   .. py:attribute:: use_rope


   .. py:attribute:: vector_in


.. py:class:: FluxCFMLoss(path, reduction='mean', cfg_scale=None)

   Bases: :py:obj:`gensbi.flow_matching.loss.ContinuousFMLoss`


   
   FluxCFMLoss is a class that computes the continuous flow matching loss for the Flux model.

   :param path: Probability path (x-prediction training).
   :param reduction: Specify the reduction to apply to the output ``'none'`` | ``'mean'`` | ``'sum'``. ``'none'``: no reduction is applied to the output, ``'mean'``: the output is reduced by mean over sequence elements, ``'sum'``: the output is reduced by sum over sequence elements. Defaults to 'mean'.
   :type reduction: str, optional















   ..
       !! processed by numpydoc !!

   .. py:method:: __call__(vf, batch, cond, obs_ids, cond_ids)

      
      Evaluates the continuous flow matching loss.

      :param vf: The vector field model to evaluate.
      :type vf: callable
      :param batch: A tuple containing the input data (x_0, x_1, t).
      :type batch: tuple
      :param cond: The conditioning data.
      :type cond: jnp.ndarray
      :param obs_ids: The observation IDs.
      :type obs_ids: jnp.ndarray
      :param cond_ids: The conditioning IDs.
      :type cond_ids: jnp.ndarray

      :returns: The computed loss.
      :rtype: jnp.ndarray















      ..
          !! processed by numpydoc !!


   .. py:attribute:: cfg_scale
      :value: None



.. py:class:: FluxParams

   
   Parameters for the Flux model.

   :param in_channels: Number of input channels.
   :type in_channels: int
   :param vec_in_dim: Dimension of the vector input, if applicable.
   :type vec_in_dim: Union[int, None]
   :param context_in_dim: Dimension of the context input.
   :type context_in_dim: int
   :param mlp_ratio: Ratio for the MLP layers.
   :type mlp_ratio: float
   :param num_heads: Number of attention heads.
   :type num_heads: int
   :param depth: Number of double stream blocks.
   :type depth: int
   :param depth_single_blocks: Number of single stream blocks.
   :type depth_single_blocks: int
   :param axes_dim: Dimensions of the axes for positional encoding.
   :type axes_dim: list[int]
   :param qkv_bias: Whether to use bias in QKV layers.
   :type qkv_bias: bool
   :param rngs: Random number generators for initialization.
   :type rngs: nnx.Rngs
   :param obs_dim: Observation dimension.
   :type obs_dim: int
   :param cond_dim: Condition dimension.
   :type cond_dim: int
   :param use_rope: Whether to use Rotary Position Embedding (RoPE).
   :type use_rope: bool
   :param theta: Scaling factor for positional encoding.
   :type theta: int
   :param guidance_embed: Whether to use guidance embedding.
   :type guidance_embed: bool
   :param qkv_multiplier: Multiplier for QKV features.
   :type qkv_multiplier: int
   :param param_dtype: Data type for model parameters.
   :type param_dtype: DTypeLike















   ..
       !! processed by numpydoc !!

   .. py:method:: __post_init__()


   .. py:attribute:: axes_dim
      :type:  list[int]


   .. py:attribute:: cond_dim
      :type:  int


   .. py:attribute:: context_in_dim
      :type:  int


   .. py:attribute:: depth
      :type:  int


   .. py:attribute:: depth_single_blocks
      :type:  int


   .. py:attribute:: guidance_embed
      :type:  bool
      :value: False



   .. py:attribute:: in_channels
      :type:  int


   .. py:attribute:: mlp_ratio
      :type:  float


   .. py:attribute:: num_heads
      :type:  int


   .. py:attribute:: obs_dim
      :type:  int


   .. py:attribute:: param_dtype
      :type:  jax.typing.DTypeLike


   .. py:attribute:: qkv_bias
      :type:  bool


   .. py:attribute:: qkv_multiplier
      :type:  int
      :value: 1



   .. py:attribute:: rngs
      :type:  flax.nnx.Rngs


   .. py:attribute:: theta
      :type:  int
      :value: 10000



   .. py:attribute:: use_rope
      :type:  bool
      :value: True



   .. py:attribute:: vec_in_dim
      :type:  Union[int, None]


.. py:class:: Simformer(params)

   Bases: :py:obj:`flax.nnx.Module`


   
   Simformer model for joint density estimation.

   :param params: Parameters for the Simformer model.
   :type params: SimformerParams















   ..
       !! processed by numpydoc !!

   .. py:method:: __call__(x, t, args = None, *, node_ids, condition_mask, edge_mask = None)

      
      Forward pass of the Simformer model.

      :param x: Input data.
      :type x: Array
      :param t: Time steps.
      :type t: Array
      :param args: Additional arguments.
      :type args: Optional[dict]
      :param node_ids: Node identifiers.
      :type node_ids: Array
      :param condition_mask: Mask for conditioning.
      :type condition_mask: Array
      :param edge_mask: Mask for edges.
      :type edge_mask: Optional[Array]

      :returns: Model output.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:attribute:: condition_embedding


   .. py:attribute:: dim_condition


   .. py:attribute:: dim_id


   .. py:attribute:: dim_value


   .. py:attribute:: embedding_net_id


   .. py:attribute:: embedding_net_value


   .. py:attribute:: embedding_time


   .. py:attribute:: output_fn


   .. py:attribute:: params


   .. py:attribute:: total_tokens


   .. py:attribute:: transformer


.. py:class:: SimformerCFMLoss(path, reduction = 'mean')

   Bases: :py:obj:`gensbi.flow_matching.loss.ContinuousFMLoss`


   
   SimformerCFMLoss is a class that computes the continuous flow matching loss for the Simformer model.

   :param path: Probability path for training.
   :param reduction: Reduction method ('none', 'mean', 'sum').
   :type reduction: str















   ..
       !! processed by numpydoc !!

   .. py:method:: __call__(vf, batch, args = None, condition_mask = None, **kwargs)

      
      Evaluate the continuous flow matching loss.

      :param vf: Vector field model.
      :type vf: Callable
      :param batch: Input data (x_0, x_1, t).
      :type batch: Tuple[Array, Array, Array]
      :param args: Additional arguments.
      :type args: Optional[dict]
      :param condition_mask: Mask for conditioning.
      :type condition_mask: Optional[Array]
      :param \*\*kwargs: Additional keyword arguments.

      :returns: Computed loss.
      :rtype: Array















      ..
          !! processed by numpydoc !!


.. py:class:: SimformerConditioner(model)

   Bases: :py:obj:`flax.nnx.Module`


   
   Module to handle conditioning in the Simformer model.

   :param model: Simformer model instance.
   :type model: Simformer















   ..
       !! processed by numpydoc !!

   .. py:method:: __call__(obs, obs_ids, cond, cond_ids, timesteps, conditioned = True, edge_mask = None)

      
      Perform inference based on conditioning.

      :param obs: Observations.
      :type obs: Array
      :param obs_ids: Observation identifiers.
      :type obs_ids: Array
      :param cond: Conditioning values.
      :type cond: Array
      :param cond_ids: Conditioning identifiers.
      :type cond_ids: Array
      :param timesteps: Time steps.
      :type timesteps: Array
      :param conditioned: Whether to perform conditioned inference.
      :type conditioned: bool
      :param edge_mask: Mask for edges.
      :type edge_mask: Optional[Array]

      :returns: Model output.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: conditioned(obs, obs_ids, cond, cond_ids, t, edge_mask = None)

      
      Perform conditioned inference.

      :param obs: Observations.
      :type obs: Array
      :param obs_ids: Observation identifiers.
      :type obs_ids: Array
      :param cond: Conditioning values.
      :type cond: Array
      :param cond_ids: Conditioning identifiers.
      :type cond_ids: Array
      :param t: Time steps.
      :type t: Array
      :param edge_mask: Mask for edges.
      :type edge_mask: Optional[Array]

      :returns: Conditioned output.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:method:: unconditioned(obs, obs_ids, t, edge_mask = None)

      
      Perform unconditioned inference.

      :param obs: Observations.
      :type obs: Array
      :param obs_ids: Observation identifiers.
      :type obs_ids: Array
      :param t: Time steps.
      :type t: Array
      :param edge_mask: Mask for edges.
      :type edge_mask: Optional[Array]

      :returns: Unconditioned output.
      :rtype: Array















      ..
          !! processed by numpydoc !!


   .. py:attribute:: dim_joint


   .. py:attribute:: model


.. py:class:: SimformerParams

   
   Parameters for the Simformer model.

   :param rngs: Random number generators for initialization.
   :type rngs: nnx.Rngs
   :param dim_value: Dimension of the value embeddings.
   :type dim_value: int
   :param dim_id: Dimension of the ID embeddings.
   :type dim_id: int
   :param dim_condition: Dimension of the condition embeddings.
   :type dim_condition: int
   :param dim_joint: Total dimension of the joint embeddings.
   :type dim_joint: int
   :param fourier_features: Number of Fourier features for time embedding.
   :type fourier_features: int
   :param num_heads: Number of attention heads.
   :type num_heads: int
   :param num_layers: Number of transformer layers.
   :type num_layers: int
   :param widening_factor: Widening factor for the transformer.
   :type widening_factor: int
   :param qkv_features: Number of features for QKV layers.
   :type qkv_features: int
   :param num_hidden_layers: Number of hidden layers in the transformer.
   :type num_hidden_layers: int















   ..
       !! processed by numpydoc !!

   .. py:attribute:: dim_condition
      :type:  int


   .. py:attribute:: dim_id
      :type:  int


   .. py:attribute:: dim_joint
      :type:  int


   .. py:attribute:: dim_value
      :type:  int


   .. py:attribute:: fourier_features
      :type:  int
      :value: 128



   .. py:attribute:: num_heads
      :type:  int
      :value: 4



   .. py:attribute:: num_hidden_layers
      :type:  int
      :value: 1



   .. py:attribute:: num_layers
      :type:  int
      :value: 6



   .. py:attribute:: qkv_features
      :type:  int
      :value: 8



   .. py:attribute:: rngs
      :type:  flax.nnx.Rngs


   .. py:attribute:: widening_factor
      :type:  int
      :value: 3



